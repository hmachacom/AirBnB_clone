#!/usr/bin/python3
import json
import os


class FileStorage:
	"""_summary_
	"""

	__file_path = "file.json"
	__objects = {}

	def all(self):
		"""_summary_
		"""
		''' return FileStorage.__objects '''
		return self.__objects

	def new(self, obj):
		"""_summary_

		Args:
			obj (_type_): _description_
		"""
		"""se extrae directamente el dicionario apartir de la funcion to_dict() """
		if obj is not None:
			FileStorage.__objects[
				str(type(obj).__name__ + "." + obj.id)
			] = obj.to_dict()

	''' def new(self, obj):
		"""
			angela
			Creates a new key(class.id) & value(instance attributes dictionary)
			of an instance in __objects dictionary
		"""
		if obj is not None:
			self.__objects.update({str(type(obj).__name__ + "." + obj.id): obj}) '''

	def save(self):
		"""_summary_
		"""
		"""con la correccion de la funcion new() se pasa directamente el dicionario y no presenta problemas """
		with open(FileStorage.__file_path, mode="w") as my_file:
			if FileStorage.__objects is not None:
				json.dump(FileStorage.__objects, my_file)
	''' def save(self):
		"""angela
		"""
		dict_serialized = {}
		if self.__objects is not None:
			for key, value in self.__objects.items():
				dict_serialized[key] = value.to_dict()
		with open(self.__file_path, mode="w", encoding="utf-8") as my_file:
			json.dump(dict_serialized, my_file) '''


	def reload(self):
		"""_summary_
		"""
		from models.base_model import BaseModel

		""" try:
			with open(FileStorage.__file_path, mode="r") as my_file:
				var = json.load(my_file)
				for key, value in var.items():
					if key not in FileStorage.__objects.keys():
						new_class = value["__class__"]
						print("_________________")
						print(new_class)
						print("_________________")
						new_var = new_class(value)
						print(type(new_var))
						print("________jjjjjjjjjj_________")
						print(new_var)
						print("________jjjjjjjjjj_________")
						FileStorage.new(var)
		except:
			pass """

		if os.path.exists(self.__file_path):
			with open(self.__file_path, encoding="utf-8") as my_file:
				content = my_file.read()
		else:
			return
		if content is not None or bool(content) is True:
			dict_deserialized = json.loads(content)
		for key, value in dict_deserialized.items():
			if key not in self.__objects.keys():
				ClassName = value["__class__"]
				new_instance = eval("{}(**value)".format(ClassName))
				self.new(new_instance)
		else:
			pass

